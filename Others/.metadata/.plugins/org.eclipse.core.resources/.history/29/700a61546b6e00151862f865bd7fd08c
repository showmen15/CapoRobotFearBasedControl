package pl.edu.agh.capo.fear.communication;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.util.concurrent.TimeoutException;

import pl.edu.agh.capo.fear.data.Trajectory;

import com.rabbitmq.client.AMQP;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Consumer;
import com.rabbitmq.client.DefaultConsumer;
import com.rabbitmq.client.Envelope;

public class StateCollector {
	
	protected static Channel channel;
	protected String channelName =  "capoRobotStates";
	
	
	
	protected void initializeCommection()
	{
		ConnectionFactory factory = new ConnectionFactory();
	    factory.setHost("localhost");
	    try {
			Connection connection = factory.newConnection();
			channel = connection.createChannel();

			channel.exchangeDeclare(channelName, "fanout");
			String queueName = channel.queueDeclare().getQueue();
			channel.queueBind(queueName, channelName, "");

			System.out.println(" [RABBIT] Waiting for messages");

			Consumer consumer = new DefaultConsumer(channel) {
			  @Override
			  public void handleDelivery(String consumerTag, Envelope envelope,
			                             AMQP.BasicProperties properties, byte[] body) throws IOException {
			    
			    
			    ByteArrayInputStream bis = new ByteArrayInputStream(body);
			    ObjectInput in = null;
			    in = new ObjectInputStream(bis);
			    try {
					Trajectory t = (Trajectory)in.readObject();
				} catch (ClassNotFoundException e) {
					System.out.println(" [RABBIT] Error parsing message");
				} 
			    
			 
			  }
			};
			channel.basicConsume(queueName, true, consumer);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (TimeoutException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    
	}
}
