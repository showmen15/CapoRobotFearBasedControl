package pl.edu.agh.capo.fear.communication;

import java.io.IOException;
import java.io.ObjectOutput;
import java.util.concurrent.TimeoutException;

import pl.edu.agh.capo.fear.CapoRobotMotionModel;
import pl.edu.agh.capo.fear.data.LocationInTime;
import pl.edu.agh.capo.fear.data.Trajectory;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.vividsolutions.jts.math.Vector2D;

public class StatePublisher {

	protected final double trajectoryTimeStep = 0.2;
	protected final int trajectoryStepCount = 8;
	
	protected static Channel rabbitmqChannel = null;
	protected final static String rabbitExchangeName =  "capoRobotStates";
	
	
	public StatePublisher() throws IOException, TimeoutException 
	{
		if (rabbitmqChannel == null)
			initRabbit();
			
	}
	
	private void initRabbit() throws IOException, TimeoutException {

		ConnectionFactory factory = new ConnectionFactory();
        factory.setHost("localhost");
        Connection connection = factory.newConnection();
        Channel channel = connection.createChannel();

        channel.exchangeDeclare(rabbitExchangeName, "fanout");
		
	}

	public void publishCapoRobotStateAndPlan(CapoRobotMotionModel robotMotionModel, Vector2D destination)
	{
		Trajectory trajectory = new Trajectory(destination);
		for (int i = 0 ; i < trajectoryStepCount ; i ++)
			trajectory.addTrajectoryStep(new LocationInTime(
					robotMotionModel.getLocationAfterTime(trajectoryTimeStep*i)	
					, trajectoryTimeStep*i));
		
		///publish
		ObjectOutput out = new ObjectOutputStream(new ByteArrayOutputStream(););   
		
		//rabbitmqChannel.basicPublish(rabbitExchangeName, "", null, trajectory.);
	}
}
