package pl.edu.agh.capo.app;

import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.util.concurrent.TimeoutException;

import com.google.gson.Gson;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.AMQP;
import com.rabbitmq.client.Envelope;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Consumer;
import com.rabbitmq.client.DefaultConsumer;

import pl.edu.agh.capo.maze.MazeMap;
import pl.edu.agh.capo.ui.CapoMazeVisualizer;

public class CapoMazeVisualize {

	public static void main(String[] args) {

		Gson gson = new Gson();
		MazeMap mazeMap = null;
		try {
            mazeMap = gson.fromJson(new FileReader("F:/AGH/LabRobotow/CapoRobot/LokalizacjaJava/CapoMazeHough/res/MazeRoboLabFullMap2.roson" ), MazeMap.class);
        } catch (FileNotFoundException e1) {
            e1.printStackTrace();
            return;
        }
		
		System.out.println("Maze loaded");
		
		
		ConnectionFactory factory = new ConnectionFactory();
	    factory.setHost("localhost");
	    try {
			Connection connection = factory.newConnection();
			Channel channel = connection.createChannel();

			channel.exchangeDeclare("capoRobotStates", "fanout");
			String queueName = channel.queueDeclare().getQueue();
			channel.queueBind(queueName, "capoRobotStates", "");

			System.out.println(" [*] Waiting for messages. To exit press CTRL+C");

			Consumer consumer = new DefaultConsumer(channel) {
			  @Override
			  public void handleDelivery(String consumerTag, Envelope envelope,
			                             AMQP.BasicProperties properties, byte[] body) throws IOException {
			    
			    
			    ByteArrayInputStream bis = new ByteArrayInputStream(body);
			    ObjectInput in = null;
			    in = new ObjectInputStream(bis);
				Object o = in.readObject();

			    
			 
			  }
			};
			channel.basicConsume(queueName, true, consumer);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (TimeoutException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
	    
	    

		CapoMazeVisualizer.getInstance().open(mazeMap);

	}

}
