package pl.edu.agh.capo.fear;

import java.util.ArrayList;

import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.LineSegment;

import pl.edu.agh.capo.fear.data.Location;
import pl.edu.agh.capo.fear.data.LocationInTime;
import pl.edu.agh.capo.fear.data.Trajectory;
import pl.edu.agh.capo.maze.MazeMap;
import pl.edu.agh.capo.maze.Wall;


public class MazeCollisionDetector implements CollisionDetector{
	
	MazeMap mazeMap;
	ArrayList <LineSegment> wallsLineSegments = new ArrayList<LineSegment>();			
	
	public MazeCollisionDetector(String mazeRosonFilename) throws Exception
	{
		mazeMap = MazeMap.loadMazeFromFile(mazeRosonFilename);
		for (Wall wall : mazeMap.getWalls())
		{
			wallsLineSegments.add(new LineSegment(wall.getFrom().getX(),wall.getFrom().getY(),wall.getTo().getX(),wall.getTo().getY()));
		}
	}
	
//	public double getMinimumDistanceFromWall(Location location)
//	{
//		double minDistance = Double.MAX_VALUE;
//		Coordinate locationCoordinate = new Coordinate(location.positionX, location.positionY);
//		for (LineSegment segment : wallsLineSegments)
//		{
//			double distance = segment.distance(locationCoordinate);
//			if (distance < minDistance)
//				minDistance = distance;
//		}
//		return minDistance;			
//	}
//	
//	public double getMinimumDistanceFromWall(Trajectory trajectory)
//	{
//		double minDistance = Double.MAX_VALUE;
//		for (LocationInTime locationInTime : trajectory.getTrajectorySteps())
//		{
//			double distance = getMinimumDistanceFromWall(locationInTime.getLocation());
//			if (distance < minDistance)
//				minDistance = distance;
//		}
//		return minDistance;		
//	}
	
	/**
	 * 
	 * @param trajectory
	 * @return -1 if no collision detected
	 */
	public int getCollidingTrajecotryStepNumber(Trajectory trajectory)
	{
		int trajectoryStepNumber = 0;
		for (LocationInTime locationInTime : trajectory.getTrajectorySteps())
		{
			Coordinate locationCoordinate = new Coordinate(location.positionX, location.positionY);
			for (LineSegment segment : wallsLineSegments)
			{
				segment.distance(locationCoordinate);
			}
			trajectoryStepNumber++;
		}

		
		return -1;		
	}
	
	

}
