package pl.edu.agh.capo.fear;

import java.awt.peer.TrayIconPeer;
import java.util.ArrayList;
import java.util.Random;

import com.vividsolutions.jts.math.Vector2D;

import pl.edu.agh.capo.fear.collisions.CollisionDetector;
import pl.edu.agh.capo.fear.data.Location;
import pl.edu.agh.capo.fear.data.LocationInTime;
import pl.edu.agh.capo.fear.data.Trajectory;
import pl.edu.agh.capo.robot.CapoRobotMotionModel;

public class CapoSafeTrajectoryGenerator {

	public static final double trajectoryTimeStep = 0.2;
	public static final int trajectoryStepCount = 8;
	
	protected ArrayList<CollisionDetector> collisionDetectors = new ArrayList<CollisionDetector>();
	protected Random random = new Random(); 
	
	public CapoSafeTrajectoryGenerator()
	{
	}
	
	public void addColisionDetector(CollisionDetector collisionDetector)
	{
		collisionDetectors.add(collisionDetector);		
	}
	
	/**
	 * 
	 * @param motionModel -- velocity can and will be modified if given one causes collisions 
	 * @param destination
	 * @return Safe (collision-free) trajectory, which brings the robot closest to the destination.
	 *  
	 */
	public Trajectory getSafeTrajectory(CapoRobotMotionModel motionModel, Vector2D destination)
	{
		Trajectory trajectory = buildTrajectory(motionModel, destination);
		
		if (getTrajectoryQuality(trajectory, destination) > 0)		//given is safe
			return trajectory;

		double bestDistance = -1;
		double bestVelocityLeft, bestVelocityRight;		
		for (int timeout = 100; timeout>0 ; timeout--)
		{
			
			
		}
		
		return trajectory;
	}
	
	/**
	 * 
	 * @param trajectory
	 * @return -1 if the trajectory causes collision according to any CollisionDetector. Final distance to destination otherwise.
	 */
	private double getTrajectoryQuality(Trajectory trajectory, Vector2D destination)
	{
		for (CollisionDetector collisionDetector : collisionDetectors)
			if (collisionDetector.getCollidingTrajecotryStepNumber(trajectory) >= 0)
				return -1;

		return trajectory.getLastStepLocation().getPositionVector().distance(destination);
	}

	protected Trajectory buildTrajectory(CapoRobotMotionModel motionModel, Vector2D destination)
	{
		Trajectory trajectory = new Trajectory(destination);
		for (int i = 0 ; i < trajectoryStepCount ; i ++)
			trajectory.addTrajectoryStep(new LocationInTime(
					motionModel.getLocationAfterTime(trajectoryTimeStep*i),
					trajectoryTimeStep*i));
		return trajectory;		
	}
	
}
